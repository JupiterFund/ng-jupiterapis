// source: jupiter/datastream/v1/transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var jupiter_datastream_v1_market_pb = require('../../../jupiter/datastream/v1/market_pb.js');
goog.object.extend(proto, jupiter_datastream_v1_market_pb);
goog.exportSymbol('proto.jupiter.datastream.v1.Transaction', null, global);
goog.exportSymbol('proto.jupiter.datastream.v1.Transaction.BSFlag', null, global);
goog.exportSymbol('proto.jupiter.datastream.v1.Transaction.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jupiter.datastream.v1.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jupiter.datastream.v1.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jupiter.datastream.v1.Transaction.displayName = 'proto.jupiter.datastream.v1.Transaction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jupiter.datastream.v1.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.jupiter.datastream.v1.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jupiter.datastream.v1.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jupiter.datastream.v1.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    market: jspb.Message.getFieldWithDefault(msg, 2, 0),
    date: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    tradedate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tradetime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tradeindex: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tradechannel: jspb.Message.getFieldWithDefault(msg, 9, 0),
    tradeprice: jspb.Message.getFieldWithDefault(msg, 10, 0),
    tradeqty: jspb.Message.getFieldWithDefault(msg, 11, 0),
    trademoney: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tradebuyno: jspb.Message.getFieldWithDefault(msg, 13, 0),
    tradesellno: jspb.Message.getFieldWithDefault(msg, 14, 0),
    tradetype: jspb.Message.getFieldWithDefault(msg, 15, 0),
    tradebsflag: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jupiter.datastream.v1.Transaction}
 */
proto.jupiter.datastream.v1.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jupiter.datastream.v1.Transaction;
  return proto.jupiter.datastream.v1.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jupiter.datastream.v1.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jupiter.datastream.v1.Transaction}
 */
proto.jupiter.datastream.v1.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!proto.jupiter.datastream.v1.MarketEnum.Market} */ (reader.readEnum());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTradedate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTradetime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTradeindex(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTradechannel(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTradeprice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTradeqty(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTrademoney(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTradebuyno(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTradesellno(value);
      break;
    case 15:
      var value = /** @type {!proto.jupiter.datastream.v1.Transaction.Type} */ (reader.readEnum());
      msg.setTradetype(value);
      break;
    case 16:
      var value = /** @type {!proto.jupiter.datastream.v1.Transaction.BSFlag} */ (reader.readEnum());
      msg.setTradebsflag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jupiter.datastream.v1.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jupiter.datastream.v1.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jupiter.datastream.v1.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jupiter.datastream.v1.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarket();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDate();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTradedate();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTradetime();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getTradeindex();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getTradechannel();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTradeprice();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getTradeqty();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getTrademoney();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getTradebuyno();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getTradesellno();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getTradetype();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = message.getTradebsflag();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.jupiter.datastream.v1.Transaction.Type = {
  C: 0,
  F: 1
};

/**
 * @enum {number}
 */
proto.jupiter.datastream.v1.Transaction.BSFlag = {
  BUY: 0,
  SELL: 1,
  UNKNOWN: 2
};

/**
 * optional string code = 1;
 * @return {string}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MarketEnum.Market market = 2;
 * @return {!proto.jupiter.datastream.v1.MarketEnum.Market}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getMarket = function() {
  return /** @type {!proto.jupiter.datastream.v1.MarketEnum.Market} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.jupiter.datastream.v1.MarketEnum.Market} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setMarket = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 date = 3;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setDate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 time = 4;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
*/
proto.jupiter.datastream.v1.Transaction.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jupiter.datastream.v1.Transaction.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 tradeDate = 6;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradedate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradedate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 tradeTime = 7;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradetime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 tradeIndex = 8;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradeindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradeindex = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 tradeChannel = 9;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradechannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradechannel = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 tradePrice = 10;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradeprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradeprice = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 tradeQty = 11;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradeqty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradeqty = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 tradeMoney = 12;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTrademoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTrademoney = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 tradeBuyNo = 13;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradebuyno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradebuyno = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 tradeSellNo = 14;
 * @return {number}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradesellno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradesellno = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional Type tradeType = 15;
 * @return {!proto.jupiter.datastream.v1.Transaction.Type}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradetype = function() {
  return /** @type {!proto.jupiter.datastream.v1.Transaction.Type} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {!proto.jupiter.datastream.v1.Transaction.Type} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 15, value);
};


/**
 * optional BSFlag tradeBSFlag = 16;
 * @return {!proto.jupiter.datastream.v1.Transaction.BSFlag}
 */
proto.jupiter.datastream.v1.Transaction.prototype.getTradebsflag = function() {
  return /** @type {!proto.jupiter.datastream.v1.Transaction.BSFlag} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {!proto.jupiter.datastream.v1.Transaction.BSFlag} value
 * @return {!proto.jupiter.datastream.v1.Transaction} returns this
 */
proto.jupiter.datastream.v1.Transaction.prototype.setTradebsflag = function(value) {
  return jspb.Message.setProto3EnumField(this, 16, value);
};


goog.object.extend(exports, proto.jupiter.datastream.v1);
